fit
autoplot(fit)
fit = forecast(treino, model = arima)
autoplot(fit)
fit = forecast(teste, model = arima)
tsdisplay(residuals(arima))
forecast(arima, h = 30)
previsao = forecast(arima, h = 30)
erro = previsao$mean - teste
previsao$mean
teste
as.numeric(teste)
erro = as.numeric(previsao$mean) - as.numeric(teste)
as.numeric(teste)
as.numeric(teste) %>% length()
as.numeric(previsao$mean) %>% length()
previsao = forecast(arima, h = 31)
erro = as.numeric(previsao$mean) - as.numeric(teste)
erro
teste = serie[(121269-24):121269]
treino = serie[(121269-(24*31)):(121269-24)]
teste = serie[(121269-24):121269]
adf.test(treino,
alternative = "explosive")
autoplot(treino) +
ylab("Consumo em MW/hora") +
xlab("") +
labs(title = "Dados de consumo de uma unidade geradora de Furnas")
library(xts)
serie = to.daily(serie)
serie
autoplot(serie) +
ylab("Consumo em MW/hora") +
xlab("") +
labs(title = "Dados de consumo de uma unidade geradora de Furnas")
autoplot(serie) +
ylab("Consumo em MW/hora") +
xlab("") +
labs(title = "Dados de consumo de uma unidade geradora de Furnas")
serie = (serie$serie.High + serie$serie.Low)/2
autoplot(serie) +
ylab("Consumo em MW/hora") +
xlab("") +
labs(title = "Dados de consumo de uma unidade geradora de Furnas")
ggAcf(serie)
ggPacf(serie)
arima = auto.arima(serie,
stationary = TRUE,
seasonal = TRUE,
max.order = 10000)
previsao = forecast(arima, h = 31)
forecast(arima, h = 31)
plot(previsao)
saveRDS(diaria, "diaria.Rds")
diaria = to.daily(serie)
diaria = (diaria$serie.High + diaria$serie.Low)/2
saveRDS(diaria, "diaria.Rds")
hist(residuals(arima))
previsao = forecast(arima, h = 31)
library(forecast)
library(ggplot2)
library(tseries)
library(xts)
serie = readRDS("serie.Rds")
serie = to.daily(serie)
serie = (serie$serie.High + serie$serie.Low)/2
autoplot(serie) +
ylab("Consumo em MW/hora") +
xlab("") +
labs(title = "Dados de consumo de uma unidade geradora de Furnas")
adf.test(treino,
alternative = "explosive")
ggAcf(serie)
ggPacf(serie)
arima = auto.arima(serie,
stationary = TRUE,
seasonal = TRUE,
max.order = 10000)
hist(residuals(arima))
previsao = forecast(arima, h = 31)
erro = as.numeric(previsao$mean) - as.numeric(teste)
plot(forecast)
source('C:/Users/pedro/Desktop/trab_series1/analise.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(ggplot2)
library(tseries)
library(xts)
serie = readRDS("serie.Rds")
autoplot(serie) +
ylab("Consumo em MW/hora") +
xlab("") +
labs(title = "Série de consumo da American Eletrical Power")
summary(serie)
library(e1071)
moment(serie, order = 2, center = TRUE)
var(serie)
library(fitdistrplus)
install.packages("fitdistrplus")
library(fitdistrplus)
descdist(serie)
serie
class(serie)
class(as.numeric(serie))
descdist(as.numeric(serie))
descdist(as.numeric(serie),
boot = 1000)
descdist(as.numeric(serie),
boot = 100)
hist(serie)
shapiro.test(serie)
shapiro.test(serie[1:5000])
ks.test(x = serie, y = rnorm(n = length(x), mean = mean(x), sd = sd(x)))
ks.test(x = serie, y = rnorm(n = length(serie), mean = mean(serie), sd = sd(serie)))
sd(serie)
mean(serie)
ks.test(x = as.numeric(serie), y = rnorm(n = length(serie), mean = mean(serie), sd = sd(serie)))
y = rnorm(n = length(serie), mean = mean(serie), sd = sd(serie))
normal_simulada = y
ks.test(x = as.numeric(serie),
normal_simulada)
ks.test(x = as.numeric(serie),
lognormal_simulada)
lognormal_simulada = y
ks.test(x = as.numeric(serie),
lognormal_simulada)
jarque.bera.test(serie)
adf.test(treino,
alternative = "explosive")
lm(serie ~ lag(serie))
library(dplyr)
lm(serie ~ lag(serie)) %>% summary()
wald.test(b = coef(randomwalk),
Sigma = vcov(randomwalk),
H0 = c(3687, 1))
library(dplyr)library(aod)
library(aod)
install.packages("aod")
library(aod)
wald.test(b = coef(randomwalk),
Sigma = vcov(randomwalk),
H0 = c(3687, 1))
wald.test(b = coef(randomwalk),
Sigma = vcov(randomwalk),
H0 = c(3687, 1),
L = NULL)
wald.test(b = coef(randomwalk),
Sigma = vcov(randomwalk),
H0 = c(3687, 1),
L = NULL,
Terms = NULL)
wald.test(b = coef(randomwalk),
Sigma = vcov(randomwalk),
H0 = c(3687, 1),
L = NULL,
Terms = 1:2)
randomwalk = lm(serie ~ lag(serie))
randomwalk %>% summary()
wald.test(b = coef(randomwalk),
Sigma = vcov(randomwalk),
H0 = c(3687, 1),
L = NULL,
Terms = 1:2)
wald.test(b = coef(randomwalk),
Sigma = vcov(randomwalk),
H0 = c(3687, 1))
wald.test(b = coef(randomwalk),
Sigma = vcov(randomwalk),
H0 = c(3687, 1),
Terms = 1:2)
wald.test(b = coef(randomwalk),
Sigma = vcov(randomwalk),
H0 = c(3687, 1),
Terms = NULL)
wald.test(b = coef(randomwalk),
Sigma = vcov(randomwalk),
H0 = c(3687, 1),
L = NULL)
1:2
wald.test(b = coef(randomwalk),
Sigma = vcov(randomwalk),
H0 = c(3687, 1),
Terms = 1:2)
wald.test(b = coef(randomwalk),
Sigma = vcov(randomwalk),
H0 = c(1),
Terms = 2)
ggPacf(serie)
ggAcf(serie)
autoplot(log(serie)) +
ylab("Log do Consumo em MW/hora") +
xlab("") +
labs(title = "Série de consumo da American Eletrical Power")
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(ggplot2)
library(tseries)
library(xts)
library(e1071)
library(fitdistrplus)
library(dplyr)
library(aod)
serie = readRDS("serie.Rds")
serie = log(serie)
hist(serie)
y = rnorm(n = length(serie), mean = mean(serie), sd = sd(serie))
normal_simulada = y
ynormal_simulada = rnorm(n = length(serie), mean = mean(serie), sd = sd(serie))
ks.test(x = as.numeric(serie),
normal_simulada)
adf.test(serie,
alternative = "explosive")
randomwalk = lm(serie ~ lag(serie))
randomwalk %>% summary()
wald.test(b = coef(randomwalk),
Sigma = vcov(randomwalk),
H0 = c(1),
Terms = 2)
ggAcf(serie, lag.max = 48) # dois dias
ggAcf(serie, lag.max = (24*30)) # um mês
ggAcf(serie, lag.max = (24*30*12)) # um ano
ggAcf(serie, lag.max = (24*30*12*5)) # cinco anos
ggPacf(serie, lag.max = 48) # dois dias
ggPacf(serie, lag.max = (24*30)) # um mês
ggPacf(serie, lag.max = (24*30*3)) # um trimestre
ggPacf(serie, lag.max = (24*30*12)) # um ano
ggPacf(serie, lag.max = (24*30*12*5)) # cinco anos
ggPacf(serie, lag.max = 48) # dois dias
ggPacf(serie, lag.max = (24*30)) # um mês
ggAcf(serie, lag.max = 48) # dois dias
ggAcf(serie, lag.max = (24*30*12*5)) # cinco anos
decompose(serie) %>% autoplot()
decompose(serie) %>% plot()
decompose(serie)
hp.filter(serie)
hpfilter(serie)
filter(serie)
hpfilter(serie)
install.packages("FKF")
library(FKF)
fkf(serie)
install.packages("kafas")
install.packages("KFAS")
library(KFAS)
kf(serie)
KFAS::kf(serie)
KFAS::KFS(serie)
KFAS::KFS(serie)
install.packages("mFilter")
library(mFilter)
install.packages("mFilter")
install.packages("mFilter")
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(ggplot2)
library(tseries)
library(xts)
library(e1071)
library(fitdistrplus)
library(dplyr)
library(aod)
library(mFilter)
serie = readRDS("serie.Rds")
serie = log(serie)
mFilter::hpfilter(serie)
mFilter::hpfilter(serie, type = "lambda")
mFilter::hpfilter(serie, type = "lambda", freq = 1600)
STL(serie)
install.packages("fpp")
library(fpp)
STL(serie)
stl(serie)
stl(serie, "periodic")
decompose(serie, "additive")
ggPacf(serie, lag.max = 48) # dois dias
ggAcf(serie, lag.max = 48) # dois dias
modelo = auto.arima(serie)
modelo = auto.arima(serie,
stationary = TRUE,
seasonal = TRUE,
parallel = TRUE,
allowmean = TRUE,
ic = c("bic"))
modelo = auto.arima(serie,
stationary = TRUE,
seasonal = TRUE,
parallel = TRUE,
allowmean = TRUE,
stepwise = FALSE,
ic = c("bic"))
summary(modelo)
modelo = auto.arima(serie,
stationary = TRUE,
seasonal = TRUE,
allowmean = TRUE,
max.order = 2000,
ic = c("bic"))
summary(modelo)
modelo = auto.arima(serie,
stationary = TRUE,
seasonal = TRUE,
allowmean = TRUE,
max.order = 2000,
ic = c("aic"))
summary(modelo)
plot(forecast(modelo, h = 24))
plot(forecast(modelo, h = 24))
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(ggplot2)
library(tseries)
library(xts)
library(e1071)
library(fitdistrplus)
library(dplyr)
library(aod)
library(fpp)
serie = readRDS("serie.Rds")
serie = log(serie)
serie %>% as.ts() %>% decompose()
serie %>% as.ts() %>% stl()
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(ggplot2)
library(tseries)
library(xts)
library(e1071)
library(fitdistrplus)
library(dplyr)
library(aod)
serie = readRDS("serie.Rds") %>% log()
forecast(modelo, h = (24*30*12))
forecast(modelo, h = (24*30*12)) %>% plot()
summary(modelo)
forecast(modelo, h = (24*30*12)) %>% plot(xlim = c(4e+08))
forecast(modelo, h = (24*30*12)) %>% plot()
str(modelo)
modeloarma = arma(serie, order = c(3,2))
modeloarma = arma(serie, order = c(3,2), coef = coefficients(modelo))
summary(modeloarma)
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(ggplot2)
library(tseries)
library(xts)
library(e1071)
library(fitdistrplus)
library(dplyr)
library(aod)
serie = readRDS("serie.Rds") %>% log()
serie = to.weekly(serie)
ggAcf(serie, lag.max = 8)
serie
class(serie)
str(serie)
serie = (to.weekly(serie)$serie.Open + to.weekly(serie)$serie.Close)/2
ggAcf(serie, lag.max = 8)
ggPacf(serie)
ggAcf(serie, lag.max = 4*3) # um trimestre
ggAcf(serie, lag.max = 4*52) # um trimestre
ggPacf(serie)
modelo = auto.arima(serie,
stationary = TRUE,
seasonal = TRUE,
allowmean = TRUE,
max.order = 2000,
ic = c("bic"))
summary(modelo)
ggAcf(serie, lag.max = 4*52) # um ano
ggAcf(serie)
ggAcf(serie, lag.max = 4*6) # um semestre
ggAcf(serie, lag.max = 4*6) # um semestre
ggPacf(serie)
summary(modelo)
benchmark = lm(serie ~ lag(serie)) %>% summary()
benchmark
RMSE_benchmark = sqrt(sum(benchmark$residuals^2) / benchmark$df)
RMSE_benchmark
benchmark$df
RMSE_benchmark = sqrt(sum(benchmark$residuals^2) / benchmark$df[2])
RMSE_benchmark
benchmark2 = lm(serie ~ lag(serie) + lag(serie, k = 2) + lag(serie, k = 3))
benchmark2 %>% summary()
RMSE_benchmark = sqrt(sum(benchmark$residuals^2) / benchmark$df[2])
modelo$sigma2
RMSE_arima = sqrt(sum(modelo$residuals^2) / modelo$df[2])
RMSE_arima
RMSE_arima = sqrt(sum(modelo$residuals^2) / modelo$df)
RMSE_arima
modelo$df
modelo
modelo$nobs
RMSE_arima = sqrt(sum(modelo$residuals^2) / (modelo$obs - length(modelo$coef)))
RMSE_arima
sum(modelo$residuals^2)
modelo$obs
RMSE_arima = sqrt(sum(modelo$residuals^2) / (modelo$nobs - length(modelo$coef)))
RMSE_arima
RMSE_benchmark
Box.test(modelo$residuals,
type = "Ljung",
lag = 1)
Box.test(modelo$residuals,
type = "Ljung",
lag = 1,
fitdf = 5) # soma das ordens do ARIMA
Box.test(modelo$residuals,
type = "Ljung",
lag = 12,
fitdf = 5) # soma das ordens do ARIMA
Box.test(modelo$residuals,
type = "Ljung",
lag = 120,
fitdf = 5) # soma das ordens do ARIMA
Box.test(modelo$residuals,
type = "Ljung",
lag = 10,
fitdf = 5) # soma das ordens do ARIMA
Box.test(modelo$residuals,
type = "Ljung",
lag = 6,
fitdf = 5) # soma das ordens do ARIMA
library(lmtest)
bptest(serie[3:length(serie)] ~ primeirolag[3:length(primeirolag)] + segundo[2:length(segundo)] + terceiro)
primeirolag = stats::lag(serie)
terceiro = stats::lag(serie, k = 3)
bptest(serie[3:length(serie)] ~ primeirolag[3:length(primeirolag)] + segundo[2:length(segundo)] + terceiro)
segundo = stats::lag(serie, k = 2)
terceiro = stats::lag(serie, k = 3)
bptest(serie[3:length(serie)] ~ primeirolag[3:length(primeirolag)] + segundo[2:length(segundo)] + terceiro)
serie[3:length(serie) %>% length()
asd
serie[3:length(serie) %>% length()
as
serie[3:length(serie)] %>% length()
primeirolag[3:length(primeirolag)] %>% length()
segundo[2:length(segundo)] %>% length()
bptest(serie[3:length(serie)] ~ primeirolag[3:length(primeirolag)] + segundo[3:length(segundo)] + terceiro)
terceiro %>% length()
head(terceiro)
bptest(serie ~ primeirolag + segundo + terceiro)
jarque.bera.test(modelo$residuals)
round(RMSE_benchmark - RMSE_arima, digits = 3)
``r round(RMSE_benchmark - RMSE_arima, digits = 3)``
melhora
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(ggplot2)
library(tseries)
library(xts)
library(e1071)
library(fitdistrplus)
library(dplyr)
library(aod)
library(lmtest)
serie = readRDS("serie.Rds") %>% log()
melhora = round(RMSE_benchmark - RMSE_arima, digits = 3)*100
melhora
melhora = round(RMSE_benchmark - RMSE_arima, digits = 3)*100
melhora
modelo = auto.arima(serie,
stationary = TRUE,
seasonal = TRUE,
allowmean = TRUE,
max.order = 2000,
ic = c("bic"))
summary(modelo)
benchmark = lm(serie ~ lag(serie))
benchmark %>% summary()
RMSE_benchmark = sqrt(sum(benchmark$residuals^2) / benchmark$df[2])
RMSE_arima = sqrt(sum(modelo$residuals^2) / (modelo$nobs - length(modelo$coef)))
melhora = round(RMSE_benchmark - RMSE_arima, digits = 3)*100
melhora
modelo = auto.arima(serie,
stationary = TRUE,
seasonal = TRUE,
allowmean = TRUE,
max.order = 2000,
ic = c("bic"))
summary(modelo)
benchmark = lm(serie ~ lag(serie))
benchmark %>% summary()
RMSE_benchmark = sqrt(sum(benchmark$residuals^2) / benchmark$df[2])
RMSE_arima = sqrt(sum(modelo$residuals^2) / (modelo$nobs - length(modelo$coef)))
razao = round(RMSE_benchmark/RMSE_arima, digits = 3)
razao
RMSE_benchmark
benchmark$df[2]
benchmark$df
RMSE_benchmark = sqrt(sum(benchmark$residuals^2) / benchmark$df)
RMSE_arima = sqrt(sum(modelo$residuals^2) / (modelo$nobs - length(modelo$coef)))
razao = round(RMSE_benchmark/RMSE_arima, digits = 3)
razao
RMSE_benchmark
RMSE_arima
serie = (to.weekly(serie)$serie.Open + to.weekly(serie)$serie.Close)/2
modelo = auto.arima(serie,
stationary = TRUE,
seasonal = TRUE,
allowmean = TRUE,
max.order = 2000,
ic = c("bic"))
summary(modelo)
benchmark = lm(serie ~ lag(serie))
benchmark %>% summary()
RMSE_benchmark = sqrt(sum(benchmark$residuals^2) / benchmark$df)
RMSE_arima = sqrt(sum(modelo$residuals^2) / (modelo$nobs - length(modelo$coef)))
RMSE_benchmark
RMSE_arima
razao = round(RMSE_benchmark/RMSE_arima, digits = 3)
razao
melhora = (round(RMSE_benchmark/RMSE_arima, digits = 3) - 1)
